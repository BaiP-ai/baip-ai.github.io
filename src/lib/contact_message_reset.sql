-- WARNING: This script will delete all existing data in the contact_messages table.

-- Drop the existing table and its dependent objects (like policies)
DROP TABLE IF EXISTS public.contact_messages CASCADE;

-- Recreate the table
CREATE TABLE public.contact_messages (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
  name text,
  email text NOT NULL,
  company text,
  message text NOT NULL,
  status text DEFAULT 'new'::text, -- e.g., 'new', 'read', 'replied'
  admin_reply text -- To store admin replies later
);

-- Enable Row Level Security
ALTER TABLE public.contact_messages ENABLE ROW LEVEL SECURITY;

-- Drop any previous policies just in case (belt and suspenders)
DROP POLICY IF EXISTS "Allow public insert access" ON public.contact_messages; 
DROP POLICY IF EXISTS "Allow anon insert access" ON public.contact_messages; 
DROP POLICY IF EXISTS "Allow ALL inserts" ON public.contact_messages; 

-- Create the simplest possible permissive INSERT policy
CREATE POLICY "Allow ALL inserts" ON public.contact_messages
  FOR INSERT
  TO public -- Grant to public role (includes anon)
  WITH CHECK (true); -- Simplest check: always true

-- Add comments for clarity
COMMENT ON TABLE public.contact_messages IS 'Stores messages submitted via the contact form.';
COMMENT ON COLUMN public.contact_messages.status IS 'Tracks the status of the message (e.g., new, read, replied).';
COMMENT ON COLUMN public.contact_messages.admin_reply IS 'Stores the reply sent by an admin.';

-- Explicitly grant INSERT permission (redundant but safe)
GRANT INSERT ON TABLE public.contact_messages TO public, anon;

